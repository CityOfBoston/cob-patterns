/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Configuration for a `<cob-map>` web component to generate a map from a number of data sources.
 */
export interface CobMap10 {
  /**
   * Version of the configuration format. For this schema, should be "1.0".
   */
  version: string;
  /**
   * Definitions for the layers to include on the map.
   */
  dataSources?: DataSource[];
  /**
   * Filters to change what’s shown on the map.
   */
  filters?: Filter[];
  /**
   * Definition for the map to render. Defined as an array for future expansion, but currently only one map is rendered.
   */
  maps?: Map[];
}
/**
 * Configuration for a feed of geo data. E.g. a specific ArcGIS service layer.
 */
export interface DataSource {
  /**
   * Unique ID for this data source
   */
  uid?: string;
  /**
   * Configuration for how point features are rendered. Set to `null` to keep these from rendering.
   */
  icons?: null | IconStyle;
  /**
   * Configuration for how line and polygon features are rendered. Set to `null` to keep these from rendering.
   */
  polygons?: null | VectorStyle;
  /**
   * A mustache template for the HTML to render in the popup that appears when the user clicks on the feature. The feature’s ArcGIS attributes will be in scope for the template, and can be referenced with `{{…}}`.
   */
  popupHtmlTemplate?: string;
  /**
   * Configuration for where to load the data source from.
   */
  data?: ArcGisFeatureService;
  /**
   * Options for how this layer is rendered in the legend. Set to `null` to keep the layer from appearing in the legend.
   */
  legend?: null | LegendStyle;
}
export interface IconStyle {
  /**
   * URL for an SVG image to place at the marker point.
   */
  markerUrl?: string;
  /**
   * Whether icons that are close to each other should be collapsed together using the Leaflet.markerCluster plugin.
   */
  cluster?: boolean;
}
export interface VectorStyle {
  /**
   * The name of a preset in the VizWiz UI.
   */
  style?: string;
  /**
   * Hex color to use as the stroke color on features. If a fill is applied, it will be this color at a semi-transparent opacity.
   */
  color?: string;
  /**
   * Hex color to use as the stroke color on features when the mouse is hovered over them. If a fill is applied, it will be this color at a semi-transparent opacity.
   */
  hoverColor?: string;
  /**
   * If true, fills the polygons with the color at partial opacity.
   */
  fill?: boolean;
}
export interface ArcGisFeatureService {
  /**
   * The type of data source. Currently only layers from Esri’s ArcGIS servers are supported.
   */
  type: 'arcgis';
  /**
   * URL for the feature service on the ArcGIS server. Should not end in a slash.
   */
  service: string;
  /**
   * The number of the specific layer in the feature service to display.
   */
  layer: number;
}
export interface LegendStyle {
  /**
   * The label to show in the legend for this layer.
   */
  label: string;
}
export interface Filter {
  /**
   * Data source that this filter applies to
   */
  dataSourceUid: string;
  /**
   * Label for the filter
   */
  title: string;
  /**
   * UI element to use as the filter
   */
  type: 'select';
  /**
   * ArcGIS query in Handlebars format, with the filter value as the current value
   */
  queryTemplate: string;
  default?:
    | string
    | {
        value: string;
        /**
         * Date part to check against
         */
        date?: string;
        eq?: string | number;
        lt?: string | number;
        lte?: string | number;
        gt?: string | number;
        gte?: string | number;
      }[];
  options?: (
    | {
        type?: 'value';
        title: string;
        value: string;
        query?: string;
      }
    | {
        type: 'separator';
      }
    | {
        type: 'dynamic';
        field: string;
        limitWithFilters?: boolean;
      })[];
}
export interface Map {
  /**
   * Unique ID for the map.
   */
  uid?: string;
  /**
   * Title for the map that appears as a label for the “overlay” dropdown on narrow breakpoints.
   */
  title?: string;
  /**
   * HTML to be placed in the overlay to explain how to use the map.
   */
  instructionsHtml?: string;
  /**
   * Latitude for the center of the map
   */
  latitude?: number;
  /**
   * Longitude for the center of the map
   */
  longitude?: number;
  /**
   * Zoom level for the map
   */
  zoom?: number;
  /**
   * Whether or not to show Leaflet’s +/- zoom buttons on the map.
   */
  showZoomControl?: boolean;
  /**
   * Whether or not to show a legend in the overlay box.
   */
  showLegend?: boolean;
  /**
   * Whether or not to get the user’s location with location services and display it on the map.
   */
  showUserLocation?: boolean;
  /**
   * Configuration for adding an address search box to the overlay. Leave `null` to not show the box.
   */
  addressSearch?: null | AddressSearch;
}
export interface AddressSearch {
  /**
   * Title above the search box
   */
  title?: string;
  /**
   * Placeholder to go within the search box when it’s empty.
   */
  placeholder?: string;
  /**
   * If true, the map will zoom in close to a search result after it’s found.
   */
  zoomToResult?: boolean;
  /**
   * If not `null`, will open the popup for the specified layer when the search result is chosen.
   */
  autoPopupDataSourceUid?: null | string;
  /**
   * Specify an ArcGIS GeocodeServer URL other than the default ESRI world one.
   */
  geocoderUrl?: null | string;
}
